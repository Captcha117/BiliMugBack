<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.oken1.modules.video.dao.RankDao">
    <!--游戏排行-->
    <select id="gameRank" resultType="map">
        SELECT g.common_name                              Name,
               z.total                                    Total,
               z.play                                     Play,
               z.valid_total                              ValidTotal,
               z.valid_play                               ValidPlay,
               z.play - z.valid_play                      FilterPlay,
               rank() over ( ORDER BY z.valid_play DESC ) ValidRank,
               rank() over ( ORDER BY z.play DESC )       OriginRank
        FROM (
                 SELECT c.game_id,
                        count(1)                          total,
                        sum(v.play)                       play,
                        sum(IF(d.aid IS NULL, 1, 0))      valid_total,
                        sum(IF(d.aid IS NULL, v.play, 0)) valid_play
                 FROM mug_game_content c
                          LEFT JOIN mug_video v ON c.aid = v.aid
                          LEFT JOIN mug_dssq d ON v.aid = d.aid
                 WHERE date(v.pub_time) >= str_to_date(#{startDate}, '%Y-%m-%d')
                   AND str_to_date(#{endDate}, '%Y-%m-%d') >= date(v.pub_time)
                 GROUP BY c.game_id
             ) z
                 LEFT JOIN mug_game g ON z.game_id = g.game_id
        ORDER BY z.valid_play DESC
    </select>

    <!--UP主排行-->
    <select id="upRank" resultType="map">
        SELECT
            rank ( ) over ( ORDER BY z.valid_play DESC ) valid_rank,
        <if test="referStartDate != null and referEndDate != null">
            c.compare_rank,
        </if>
            u.id,
            z.total,
            z.play,
            z.valid_total,
            z.valid_play,
            z.play - z.valid_play filter_play,
            z.coin,
            rank ( ) over ( ORDER BY z.coin DESC ) coin_rank,
            z.share,
            rank ( ) over ( ORDER BY z.SHARE DESC ) share_rank,
            z.iine,
            rank ( ) over ( ORDER BY z.iine DESC ) iine_rank,
            z.carry,
            u.face
        FROM
            (
                SELECT
                    v.uid,
                    count( 1 ) total,
                    sum( v.play ) play,
                    sum( IF(d.aid IS NULL, v.coin, 0) ) coin,
                    sum( IF(d.aid IS NULL, v.share, 0) ) share,
                    sum( IF(d.aid IS NULL, v.iine, 0) ) iine,
                    sum( IF(d.aid IS NULL, 1, 0) ) valid_total,
                    sum( IF(d.aid IS NULL, v.play, 0) ) valid_play,
                    sum( IF(d.aid IS NULL, v.copyright - 1, 0)) carry
                FROM
                    mug_video v
                        LEFT JOIN mug_dssq d ON v.aid = d.aid
                WHERE
                    date( v.pub_time ) >= str_to_date( #{startDate}, '%Y-%m-%d' )
                  AND str_to_date( #{endDate}, '%Y-%m-%d' ) >= date( v.pub_time )
                GROUP BY
                    v.uid
            ) z
                LEFT JOIN mug_uploader u ON z.uid = u.uid
        <if test="referStartDate != null and referEndDate != null">
                LEFT JOIN (
                SELECT
                    rank ( ) over ( ORDER BY z.valid_play DESC ) compare_rank,
                    u.uid
                FROM
                    (
                        SELECT
                            v.uid,
                            sum( IF(d.aid IS NULL, v.play, 0) ) valid_play
                        FROM
                            mug_video v
                                LEFT JOIN mug_dssq d ON v.aid = d.aid
                        WHERE
                            date( v.pub_time ) >= str_to_date( #{referStartDate}, '%Y-%m-%d' )
                          AND str_to_date( #{referEndDate}, '%Y-%m-%d' ) >= date( v.pub_time )
                        GROUP BY
                            v.uid
                    ) z
                        LEFT JOIN mug_uploader u ON z.uid = u.uid
            ) c on u.uid = c.uid
        </if>
        WHERE
            z.valid_play >= 100000
        ORDER BY
            valid_play DESC
    </select>

    <sql id="uploaderYearRankSql">
        SELECT v.uid,
               current_timestamp()                                      update_time,
               sum(IF(v.dssq, 0, v.play))                               play,
               count(IF(v.dssq, 0, 1))                                  num,
               rank() over ( ORDER BY sum(IF(v.dssq, 0, v.play)) DESC ) play_rank
        FROM v_video v
        WHERE v.pub_date BETWEEN DATE_ADD(CURRENT_DATE(), INTERVAL -1 year)
                  AND DATE_ADD(CURRENT_DATE(), INTERVAL -1 DAY)
        GROUP BY v.uid
        ORDER BY play DESC
        LIMIT 500
    </sql>

    <insert id="insertUploaderYearRank">
        insert mug_rank_uploader (uid, update_time, video_play, video_count, uploader_rank)
        <include refid="uploaderYearRankSql"/>
    </insert>

    <sql id="uploaderGameYearRankSql">
        SELECT k.*, current_timestamp() update_time
        FROM (
                 SELECT t.uid,
                        t.game_id,
                        sum(t.game_play)                     video_play,
                        count(1)                             video_count,
                        rank() over ( PARTITION BY t.game_id
                            ORDER BY sum(t.game_play) DESC ) uploader_rank
                 FROM (
                          SELECT v.aid,
                                 v.uid,
                                 v.play,
                                 v.pub_time,
                                 c.game_id,
                                 z.game_count,
                                 round(v.play / z.game_count) game_play
                          FROM mug_video v
                                   JOIN mug_game_content c ON v.aid = c.aid
                                   LEFT JOIN mug_dssq d ON v.aid = d.aid
                                   LEFT JOIN (SELECT c.aid, count(1) game_count
                                              FROM mug_game_content c
                                              GROUP BY c.aid) z ON z.aid = v.aid
                          WHERE d.aid IS NULL
                            AND v.pub_time BETWEEN DATE_ADD(CURRENT_DATE(), INTERVAL - 1 YEAR)
                              AND CURRENT_DATE()
                      ) t
                 GROUP BY t.uid,
                          t.game_id
             ) k
        WHERE 500 >= k.uploader_rank
          AND k.video_play >= 1000
        ORDER BY k.video_play DESC
    </sql>
    <insert id="insertUploaderGameYearRank">
        insert mug_rank_uploader (uid, game_id, video_play, video_count, uploader_rank, update_time)
        <include refid="uploaderGameYearRankSql"/>
    </insert>
</mapper>