<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.oken1.modules.music.dao.SongDao">

    <resultMap id="SongInfo" type="map">
        <id property="songId" column="song_id"/>
        <result property="singleId" column="single_id"/>
        <result property="songTitleEn" column="song_title_en"/>
        <result property="songTitleJp" column="song_title_jp"/>
        <result property="songTitleCn" column="song_title_cn"/>
        <result property="songArtist" column="song_artist"/>
        <result property="songLength" column="song_length"/>
        <result property="releaseDate" column="release_date"/>
        <result property="songBpm" column="song_bpm"/>
        <result property="songInx" column="song_inx"/>
        <collection property="charts" javaType="list" ofType="io.oken1.modules.game.entity.ChartEntity">
            <id property="chartId" column="chart_id"/>
            <result property="difficultyId" column="difficulty_id"/>
            <result property="chartLevel" column="chart_level"/>
            <result property="chartBase" column="chart_base"/>
        </collection>
    </resultMap>

    <!--游戏曲目-->
    <select id="getSongListByGameId" resultMap="SongInfo">
        SELECT s.song_id,
               s.single_id,
               s.song_title_en,
               s.song_title_jp,
               s.song_title_cn,
               s.song_artist,
               s.song_length,
               s.release_date,
               s.song_bpm,
               s.song_id,
               s.song_inx,
               c.chart_id,
               c.difficulty_id,
               c.chart_level,
               c.chart_base
        FROM mug_song s
                 left join mug_chart c on s.song_id = c.song_id
                 left join mug_difficulty d on c.difficulty_id = d.difficulty_id and c.chart_usable = 1
        WHERE s.game_id = #{gameId}
        ORDER BY s.song_inx, s.song_title_en, d.inx
    </select>

    <select id="getBriefSongListByGameId" resultType="io.oken1.modules.music.entity.SongEntity">
        SELECT s.*
        FROM mug_song s
        WHERE s.game_id = #{gameId}
        ORDER BY s.song_inx
    </select>


    <select id="getSongInfo" resultType="java.util.LinkedHashMap">
        SELECT s.song_id,
               s.game_id,
               g.game_name,
               s.song_title_en,
               s.song_title_jp,
               s.song_artist,
               s.song_bpm,
               s.song_length,
               s.single_id,
               s.release_date,
               s.song_description
        FROM mug_song s
                 left join mug_game g on s.game_id = g.game_id
        where song_id = #{songId}
    </select>

    <!--config-->
    <select id="getSongConfigList" resultType="map">
        select g.game_id,
               g.game_name,
               z.song_count
        from mug_game g
                 left join (select s.game_id, count(1) song_count from mug_song s group by s.game_id) z
                           on g.game_id = z.game_id
    </select>
    <select id="getSongConfigListByGameId" resultType="map">
        SELECT s.*,
               ifnull(g.single_title_jp, ifnull(g.single_title_en, g.single_title_cn))
                       single_title,
               v.version_no,
               z.total chart_count
        FROM mug_song s
                 left join mug_single g on s.single_id = g.single_id
                 left join mug_version v on s.game_version = v.version_id
                 left join (select c.song_id, count(1) total from mug_chart c group by c.song_id) z
                           on s.song_id = z.song_id
        WHERE s.game_id = #{gameId}
        ORDER BY s.song_inx
    </select>
</mapper>