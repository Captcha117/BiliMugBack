<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.oken1.modules.music.dao.SongDao">

    <resultMap id="SongInfo" type="java.util.LinkedHashMap">
        <result column="songId" property="song_id"/>
        <result column="singleId" property="single_id"/>
        <result column="title" property="title"/>
        <result column="artist" property="artist"/>
        <result column="length" property="length"/>
        <result column="releaseDate" property="release_date"/>
        <result column="bpm" property="bpm"/>
        <collection property="charts" select="getChartsBySongId" javaType="java.util.List" column="{songId=song_id}">
            <result column="chartId" property="chart_id"/>
            <result column="difficultyName" property="difficulty_name"/>
            <result column="modeName" property="mode_name"/>
            <result column="chartLevel" property="chart_level"/>
        </collection>
    </resultMap>

    <!--游戏曲目-->
    <select id="getSongListByGameId" resultMap="SongInfo">
        SELECT song_id,
               single_id,
               song_title_en title,
               song_artist   artist,
               song_length   length,
               release_date,
               song_bpm      bpm
        FROM mug_song s
        WHERE s.game_id = #{gameId}
        ORDER BY s.song_inx
    </select>

    <select id="getChartsBySongId" resultType="map">
        SELECT c.chart_id,
               c.chart_level,
               d.difficulty_name,
               m.mode_name
        FROM mug_chart c
                 LEFT JOIN mug_mode m ON c.mode_id = m.mode_id
                 LEFT JOIN mug_difficulty d ON c.difficulty_id = d.difficulty_id
        WHERE c.song_id = #{songId}
          AND c.chart_usable = 1
        ORDER BY d.inx
    </select>

    <select id="getBriefSongListByGameId" resultType="io.oken1.modules.music.entity.SongEntity">
        SELECT s.*
        FROM mug_song s
        WHERE s.game_id = #{gameId}
        ORDER BY s.song_inx
    </select>


    <select id="getSongInfo" resultType="java.util.LinkedHashMap">
        SELECT s.song_id,
               s.game_id,
               g.common_name game_name,
               s.song_title_en,
               s.song_title_jp,
               s.song_artist,
               s.song_bpm,
               s.song_length,
               s.single_id,
               s.release_date
        FROM mug_song s
                 left join mug_game g on s.game_id = g.game_id
        where song_id = #{songId}
    </select>

    <select id="getSongConfigList" resultType="map">
        select g.game_id,
               g.common_name game_name,
               z.song_count
        from mug_game g
                 left join (select s.game_id, count(1) song_count from mug_song s group by s.game_id) z
                           on g.game_id = z.game_id
    </select>
    <select id="getSongConfigListByGameId" resultType="map">
        SELECT s.*,
               ifnull(g.single_title_jp, ifnull(g.single_title_en, g.single_title_cn))
                       single_title,
               v.version_no,
               z.total chart_count
        FROM mug_song s
                 left join mug_single g on s.single_id = g.single_id
                 left join mug_version v on s.game_version = v.version_id
                 left join (select c.song_id, count(1) total from mug_chart c group by c.song_id) z
                           on s.song_id = z.song_id
        WHERE s.game_id = #{gameId}
        ORDER BY s.song_inx
    </select>
</mapper>